/*
In this mode, the task of the robot is to avoid objects. 
If the robot is faced with an obstacle, it changes directions and goes toward the direction that is not blocked by an object. 
I tested this by placing boxes and different, easily detectable objects in different positions and the robot successfully performed the task. 
I also made a „labyrinth” of boxes with one exit and the robot successfully found the exit and avoided the other objects.
*/

#include <Servo.h>

// Pins
#define TRIG_PIN A1
#define ECHO_PIN A0

//Define all the connections maps to the L298N
#define enA 9
#define in1 8
#define in2 7
#define in3 5
#define in4 4
#define enB 3
#define servoPin 11


class Motor {
  int enablePin;
  int directionPin1;
  int directionPin2;

public:

//Method to define the motor pins
Motor(int ENPin, int dPin1, int dPin2) {
  enablePin = ENPin;
  directionPin1 = dPin1;
  directionPin2 = dPin2;
  }

    //Method to drive the motor 0~255 driving forward. -1~-255 driving backward
void Drive(int speed) {
  if(speed >= 0){
    digitalWrite(directionPin1, LOW);
    digitalWrite(directionPin2, HIGH);
    }else{
      digitalWrite(directionPin1, HIGH);
      digitalWrite(directionPin2, LOW);
      speed = -speed;
    }
    analogWrite(enablePin, speed);
    }
};

Motor leftMotor = Motor(enA, in1, in2);
Motor rightMotor = Motor(enB, in3, in4);
Servo myservo; // create servo object to control a servo

void motorInitiation() {

};

// Anything over 400 cm (23200 us pulse) is "out of range"
const unsigned int MAX_DIST = 23200;
bool ObsticalAhead = false;
int servoPos = 90;

enum Directions{ Forward, TurnLeft, TurnRight, TurnAround, Brake};

Directions nextStep = Forward;

unsigned long t1;
unsigned long t2;
unsigned long pulse_width;
float cm;
float inches;

void setup(){
  Serial.begin(9600);
  myservo.attach(11);
  Directions nextStep = Forward;
  pinMode(ECHO_PIN,INPUT);
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  // Set initial direction and speed
  digitalWrite(enA, LOW);
  digitalWrite(enB, LOW);
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  pinMode(TRIG_PIN, OUTPUT);
  digitalWrite(TRIG_PIN, LOW);
}

void loop(){
  checkDistance();
  checkDirection();
  drive();
}

void checkDistance(){
digitalWrite(TRIG_PIN, HIGH);
delayMicroseconds(10);
digitalWrite(TRIG_PIN, LOW);
  
while(digitalRead(ECHO_PIN) == 0); 
t1 = micros();
while (digitalRead(ECHO_PIN) == 1);
t2 = micros();
pulse_width = t2 - t1;

cm = pulse_width/58.0;
inches = pulse_width/148.0;



  // Print out results
  if ( pulse_width > MAX_DIST ){
    Serial.println("Out of range");
  }else{
    Serial.print(cm);
    Serial.print(" cm \t");
    Serial.print(inches);
    Serial.println(" in");
  }

delay(60);

  if (cm <= 10) {
    ObsticalAhead = true;
    Serial.println("Problem Ahead");
  }else{
    ObsticalAhead = false;
  }
};

void _mleft(){ 
  //turn left
    SetSpeed(180, 0);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
}


void _mforward(){
  //move forward
    SetSpeed(255, 255);
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH); 
}

void _mright(){  
    SetSpeed(180, 0);
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW); 
}

void _mback(){
    Serial.println(" VOL+ "); //move backward
    SetSpeed(255,255);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
}

void _mstop(){
  digitalWrite(enA, LOW);
  digitalWrite(enB, LOW);
  Serial.println("STOP!");  
}

void SetSpeed(int val1, int val2){
  int valSpeed1, valSpeed2;
  valSpeed1 = val1;
  valSpeed2 = val2;
  analogWrite(enA, valSpeed1);
  analogWrite(enB, valSpeed2);
}

void checkDirection(){
  Serial.println("checking direction");
  if(ObsticalAhead == true) {
    nextStep = Brake;
    drive();
    myservo.write(180); // tell servo to go to position in variable ‘pos’
    delay(400); // waits 15ms for the servo to reach the position
    checkDistance();
    if(ObsticalAhead == false) { //if left side is open
      nextStep = TurnLeft;
      Serial.println("Next step is TurnLeft");
      myservo.write(90);//reset servo position
      delay(400);
    }else{ // left is blocked, now need to look at right
      myservo.write(0); // tell servo to go to position in variable ‘pos’
      delay(800); // waits 15ms for the servo to reach the position
      checkDistance();
      if(ObsticalAhead == false) { //if right side is open
        nextStep = TurnRight;
        Serial.println("Next step is TurnRight");
        myservo.write(90);//reset servo position
        delay(400);
      }
      else { //right is blocked as well, need to turn around
        nextStep = TurnAround;
        myservo.write(90);//reset servo position
        delay(400);
        Serial.println("Next step is TurnAround");
      }
    }
}else {
  nextStep = Forward; //No obstical ahead
  }
};

void drive(){
  switch(nextStep){
    case Forward:
      //_mforward();
      leftMotor.Drive(255);
      rightMotor.Drive(255);
      Serial.println("Forward");
      break;
    case TurnLeft:
      //_mleft();
      leftMotor.Drive(-255);
      rightMotor.Drive(255);
      Serial.println(" TurnLeft");
      delay(400);
      break;
    case TurnRight:
      //_mright();
      leftMotor.Drive(255);
      rightMotor.Drive(-255);
      Serial.println(" TurnRight");
      delay(400);
      break;
    case TurnAround:
      //_mback();
      leftMotor.Drive(255);
      rightMotor.Drive(-255);
      Serial.println(" TurnAround");
      delay(600);
      break;
    case Brake:
      //_mstop();
      leftMotor.Drive(0);
      rightMotor.Drive(0);
      Serial.println(" stopped");
      break;
    default:
      Serial.println("crashed");
  }
}
